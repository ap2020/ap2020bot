service: ap2020bot

frameworkVersion: '2'
variablesResolutionMode: 20210219

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-s3-local
  - serverless-offline

custom:
  stage: '${opt:stage, "local"}'
  accountId: ${file(serverless/lib/sts.js):accountId}
  resourcePrefix: ap2020bot-${self:custom.stage}-
  iam:
    lambdaRole: ap2020bot-${self:custom.stage}-${self:provider.region}-lambdaRole
  webpack:
    webpackConfig: ./webpack.config.js
    packager: yarn
    includeModules:
      forceInclude:
        - tslib # dependency of ts-results
      forceExclude:
        - aws-sdk
    excludeFiles: "**/*.test.ts"
  dynamodbConfig:
    tableName:
      watch-portal: ${self:custom.resourcePrefix}watch-portal
  sns:
    topicName:
      error: ${self:custom.resourcePrefix}error
      slack-events: ${self:custom.resourcePrefix}slack-events
  s3Config:
    bucketName:
      default: ${self:custom.resourcePrefix}default
  # config for dynamodb-local
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
  serverless-offline-sns:
    port: 3001 # a free port for the sns server to run on
    accountId: ${self:custom.accountId}
  s3:
    host: localhost
    port: 3003
    directory: ./.buckets

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: us-east-1
  profile: ${opt:profile, ''}
  environment:
    # ! DO NOT WRITE CREDENTIALS HERE!
    # TODO: write docs about storign credentials
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMODB_TABLENAME_PREFIX: ${self:custom.resourcePrefix}
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
       - "ssm:GetParameter"
      Resource: "arn:aws:ssm:${self:provider.region}:*:parameter/ap2020bot/*"
    - Effect: "Allow"
      Action:
        - "kms:Decrypt"
      Resource: "*"
      Condition:
        'ForAnyValue:StringEquals':
          'kms:ResourceAliases': alias/ap2020bot
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodbConfig.tableName.watch-portal}"
    - Effect: Allow
      Action:
        - "sns:Publish"
      Resource: "arn:aws:sns:${self:provider.region}:*:${self:custom.sns.topicName.slack-events}"
    - Effect: Allow
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::${self:custom.s3Config.bucketName.default}/*"
  deploymentBucket:
    blockPublicAccess: true
  httpApi:
    payload: '2.0'

functions:
  watch-portal:
    handler: src/watch-portal/index.handler
    events:
      - schedule:
          rate: 'cron(5 * * * ? *)'
    memorySize: 128
  watch-inshi:
    handler: src/watch-inshi/index.handler
    events:
      - schedule:
          rate: 'cron(10 * * * ? *)'
  slash-invite-all:
    handler: src/slash/invite-all/index.handler
    events:
      - httpApi:
          path: /slack/slash/invite-all
          method: POST
  slack-events:
    handler: src/slack/events/index.handler
    events:
      - httpApi:
          path: /slack/events
          method: POST
  channel-create-notifier:
    handler: src/slack/channel-notifier/index.channelCreatedHandler
    events:
      - sns:
          topicName: ${self:custom.sns.topicName.slack-events}
          filterPolicy:
            event_name:
              - channel_created
  channel-unarchive-notifier:
    handler: src/slack/channel-notifier/index.channelUnarchiveHandler
    events:
      - sns:
          topicName: ${self:custom.sns.topicName.slack-events}
          filterPolicy:
            event_name:
              - channel_unarchive

resources:
  - '${file(serverless/resources/error-alarms.js):cfn}'
  - '${file(serverless/resources/iam/deploy.yml)}'
  - Resources:
      ErrorTopic:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: ${self:custom.sns.topicName.error}
          DisplayName: ap2020bot errors
      WatchPortalDynamoDbTable:
        Type: 'AWS::DynamoDB::Table'
        Properties:
          TableName: ${self:custom.dynamodbConfig.tableName.watch-portal}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            -
              AttributeName: key
              AttributeType: S
          KeySchema:
            -
              AttributeName: key
              KeyType: HASH
        DeletionPolicy: 'Retain' # may need to backup before deletion
      DefaultS3Bucket:
        Type: 'AWS::S3::Bucket'
        DeletionPolicy: Retain # may need to backup before deletion
        Properties:
          BucketName: ${self:custom.s3Config.bucketName.default}
          PublicAccessBlockConfiguration:
              BlockPublicAcls: true
              BlockPublicPolicy: true
              IgnorePublicAcls: true
              RestrictPublicBuckets: true
