service: ap2020bot

frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  # - serverless-offline

custom:
  stage: '${opt:stage, "local"}'
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodbTableName:
    watch-portal:
      prod: ${ssm:/ap2020bot/dynamodb/tablename/watch-portal}
      local: watch-portal
  # config for dynamodb-local
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: us-east-1
  profile: ${opt:profile}
  environment:
    # ! DO NOT WRITE CREDENTIALS HERE!
    # TODO: write docs about storign credentials
    STAGE: ${self:custom.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
       - "ssm:GetParameter"
      Resource: "arn:aws:ssm:${self:provider.region}:*:parameter/ap2020bot/*"
    - Effect: "Allow"
      Action:
        - "kms:Decrypt"
      Resource: "arn:aws:kms:${self:provider.region}:*:alias/ap2020bot"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodbTableName.watch-portal.${self:custom.stage}}"

functions:
  watch-portal:
    handler: watch-portal/index.handler
    events:
      - schedule:
          rate: 'cron(5 * * * ? *)'
    memorySize: 512

resources:
  Resources:
    WatchPortalDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodbTableName.watch-portal.${self:custom.stage}}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          -
            AttributeName: key
            AttributeType: S
        KeySchema:
          -
            AttributeName: key
            KeyType: HASH
